buildscript {
    ext.kotlinVersion = '1.3.50'
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.3"
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
}
allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: 'kotlin'
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    version = '1.0'
    ext {
        appName = "SW - Client"
        gdxVersion = '1.9.8'
        roboVMVersion = '2.3.5'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        google()
        maven { url "http://repo1.maven.org/maven2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url("https://dl.bintray.com/s1m0nw1/KtsRunner") }
    }
    test {
        useJUnitPlatform()
    }
}
subprojects {
    dependencies {

    }
    test.useTestNG()
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")


    Set<File> srcDirsSet = new HashSet<File>()
    Set<File> outputsSet = new HashSet<File>()
    allprojects.each {
        //sourceSets it.sourceSets["main"]
        println(it.sourceSets["test"].allSource.srcDirs)
        for (File file : it.sourceSets["main"].allSource.srcDirs) {
            srcDirsSet.add(file)
            println(file.path)
        }
        for (File file : it.sourceSets["main"].output) {
            outputsSet.add(file)
            outputsSet.add(new File(file.parentFile.parentFile.absolutePath + "\\kotlin\\main"))
            println(file.path)
            println(new File(file.parentFile.parentFile.absolutePath + "\\kotlin\\main").path)
        }
        //println(it.sourceSets["main"].properties)
        //println(it.sourceSets)
        //println(it.sourceSets["main"].allSource.srcDirs)
        //println(it.sourceSets["main"].output)
    }
    reports {
        setSourceDirectories(files(srcDirsSet))
        setClassDirectories(files(outputsSet))
        xml.enabled true
        xml.destination "${buildDir}\\reports\\jacoco\\report.xml"
        println("${buildDir}\\reports\\jacoco\\report.xml")
        html.enabled true
        csv.enabled true
    }
    dependsOn test
}